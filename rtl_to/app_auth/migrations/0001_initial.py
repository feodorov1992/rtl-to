# Generated by Django 4.0.2 on 2022-05-13 13:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inn', models.IntegerField(db_index=True)),
                ('kpp', models.IntegerField(db_index=True)),
                ('short_name', models.CharField(max_length=255, verbose_name='Краткое наименование')),
                ('legal_address', models.CharField(max_length=255)),
                ('fact_address', models.CharField(max_length=255)),
                ('num_prefix', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
                'permissions': [('view_all_clients', 'Can view all clients')],
            },
        ),
        migrations.CreateModel(
            name='Contractor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inn', models.IntegerField(db_index=True)),
                ('kpp', models.IntegerField(db_index=True)),
                ('short_name', models.CharField(max_length=255, verbose_name='Краткое наименование')),
                ('legal_address', models.CharField(max_length=255)),
                ('fact_address', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'contractor',
                'verbose_name_plural': 'contractors',
            },
        ),
        migrations.CreateModel(
            name='Counterparty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inn', models.IntegerField(db_index=True)),
                ('kpp', models.IntegerField(db_index=True)),
                ('short_name', models.CharField(max_length=255, verbose_name='Краткое наименование')),
                ('legal_address', models.CharField(max_length=255)),
                ('fact_address', models.CharField(max_length=255)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counterparties', to='app_auth.client')),
            ],
            options={
                'verbose_name': 'client counterparty',
                'verbose_name_plural': 'client counterparties',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_name', models.CharField(max_length=255, verbose_name='фамилия')),
                ('first_name', models.CharField(max_length=255, verbose_name='имя')),
                ('second_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='отчество')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('phone', models.CharField(max_length=30)),
                ('cp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_auth.counterparty')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_name', models.CharField(max_length=255, verbose_name='фамилия')),
                ('first_name', models.CharField(max_length=255, verbose_name='имя')),
                ('second_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='отчество')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='app_auth.client', verbose_name='организация')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': [('view_all_users', 'Can view all users')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
