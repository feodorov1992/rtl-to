//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Delivery.PonyExpress.UI_WebService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Delivery.PonyExpress.UI_WebService.IUI_Service")]
    public interface IUI_Service
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUI_Service/SubmitRequest", ReplyAction="http://tempuri.org/IUI_Service/SubmitRequestResponse")]
        System.Threading.Tasks.Task<string> SubmitRequestAsync(System.Guid accesskey, string requestBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUI_Service/SendOrderFile", ReplyAction="http://tempuri.org/IUI_Service/SendOrderFileResponse")]
        System.Threading.Tasks.Task<string> SendOrderFileAsync(System.Guid accesskey, byte[] fileContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUI_Service/GetAccessKeyInfo", ReplyAction="http://tempuri.org/IUI_Service/GetAccessKeyInfoResponse")]
        System.Threading.Tasks.Task<string> GetAccessKeyInfoAsync(System.Guid accesskey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    public interface IUI_ServiceChannel : Delivery.PonyExpress.UI_WebService.IUI_Service, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    public partial class UI_ServiceClient : System.ServiceModel.ClientBase<Delivery.PonyExpress.UI_WebService.IUI_Service>, Delivery.PonyExpress.UI_WebService.IUI_Service
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UI_ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(UI_ServiceClient.GetBindingForEndpoint(endpointConfiguration), UI_ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UI_ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UI_ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UI_ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UI_ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UI_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> SubmitRequestAsync(System.Guid accesskey, string requestBody)
        {
            return base.Channel.SubmitRequestAsync(accesskey, requestBody);
        }
        
        public System.Threading.Tasks.Task<string> SendOrderFileAsync(System.Guid accesskey, byte[] fileContent)
        {
            return base.Channel.SendOrderFileAsync(accesskey, fileContent);
        }
        
        public System.Threading.Tasks.Task<string> GetAccessKeyInfoAsync(System.Guid accesskey)
        {
            return base.Channel.GetAccessKeyInfoAsync(accesskey);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUI_Service))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SecureHttpBinding_IUI_Service))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUI_Service))
            {
                return new System.ServiceModel.EndpointAddress("http://svc-api.p2e.ru/UI_Service.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.SecureHttpBinding_IUI_Service))
            {
                return new System.ServiceModel.EndpointAddress("https://svc-api.p2e.ru/UI_Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IUI_Service,
            
            SecureHttpBinding_IUI_Service,
        }
    }
}
